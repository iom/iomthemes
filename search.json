[{"path":[]},{"path":"https://iom.github.io/iomthemes/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://iom.github.io/iomthemes/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://iom.github.io/iomthemes/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://iom.github.io/iomthemes/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://iom.github.io/iomthemes/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement https://weareallin.iom.int/. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://iom.github.io/iomthemes/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://iom.github.io/iomthemes/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://iom.github.io/iomthemes/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://iom.github.io/iomthemes/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://iom.github.io/iomthemes/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://iom.github.io/iomthemes/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://iom.github.io/iomthemes/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 iomthemes authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"Effective chart first support message. data set multiplicity chart can produced. best chart one present powerful way message want pass-story data allow tell.","code":""},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"minimalistic-design","dir":"Articles","previous_headings":"Introduction","what":"Minimalistic Design","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"“Graphical elegance often found simplicity design complexity data.”Edward Tufte main rule achieving can summarised : “keep chart simple possible”. common mistake make charts overdressing unnecessary elements details. usual suspects excess color, graphical clutter abuse special effects. Details like won’t impress anyone de-cluttering charts . : Outline message: Always use main conclusion want draw within title chart, use subtitle present data used chart. annotation chart can also help explaining chart evidence message present. message resides shape data. Chart titles clear accurate, includes time increment units. Focus legibility: Graph designed highlight trends, patterns make exceptions visible. can also designed reveal relationships among multiple values. instance, bar graph presenting categories, use horizontal bar graph arrange data greatest least descending order. Use color communicate information decoration. many colors can confuse disorient. designing graph, color can friend enemy. Depending use , can either gracefully highlight data show changes, create visual overload confuse audience. Don’t use six colors six different categories within chart: human brain process . Reshape first data: good chart establish balance content & message: many content -> legible; enough content -> precise. Therefore, content (.e. data) shall adjusted content message. instance, extra decimal places look impressive imply accuracy, ’re often pointless. , take step back round numbers plotting. Overstating numerical precision data showing many decimal places can make chart seem accurate, specificity just misleading. Even don’t exaggerate precision data, numbers genuinely accurate, overloading audience detail often useless","code":""},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"telling-story-with-data","dir":"Articles","previous_headings":"Introduction","what":"Telling Story with Data","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"Data stories needs align narrative frame, often falls one class : Shed light previously unexplored topic, , Introduce interesting angle, Provide useful suggestions solve problem, Disprove hypothesis / debunk widely held belief assumption. designing chart using ggplot2 R, beside crafting insightful message, though title subtitle, following data storytelling techniques can practically applied: Narrative Arc: Structure chart follow clear beginning, middle, end. Start setting context initial data points, show progression trend, conclude key insights. ggplot2, can use geom_line() trends annotate() add narrative elements. Highlighting Key Insights: Use colors annotations draw attention important data points. ggplot2, can use geom_point() specific colors geom_text() annotations. Comparative Analysis: Design charts compare different datasets time periods. Use facet_wrap() facet_grid() create side--side comparisons. Contextualization: Provide context adding reference lines shaded areas. Use geom_hline(), geom_vline(), geom_rect() ggplot2. Simplification: Focus simplicity removing unnecessary elements. Use theme_iom(void =TRUE) simplify chart’s appearance.","code":""},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"divisible-content","dir":"Articles","previous_headings":"Introduction","what":"Divisible Content","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"designing chart, can apply “divisible content strategy”. idea create micro-content: aka detailed, re-usable data-rich chart extract key insights highlight data points within single visual. chart designed support single-messaging focus clearly stated within chart title potentially reinforced annotations within chart. focused visuals can easily copy-pasted embedded different media: reports, presentation, talking points, websites social media… approach maximizes value content allowing reach different audiences tailored messages maintaining consistent brand voice. gives “Content Less Work”: , enhances content’s reach also ensures audience can engage information various formats platforms.","code":""},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"use-ai","dir":"Articles","previous_headings":"Introduction","what":"Use AI!","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"Note designing chart, can always speed work using AI Language Model like Copilot. need write prompt, asking R ‘{tidyverse}’ script, defining type chart want precise description dataset - including name dataframe name variable. initial script just apply theme_iom function.","code":""},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"initial-setup","dir":"Articles","previous_headings":"","what":"Initial Setup","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"need first install R R sudio. Alternatively may also use Visual Studio. start creating IOM branded charts, make sure necessary packages installed tutorial. Paste following within Rstudio Console: Load packages R environment: packages installed loaded using :: notation make code intentions clearer.","code":"# Install CRAN packages packages <- c(   # A collection of R packages designed for data science,    #including ggplot2, dplyr, tidyr, readr, purrr, tibble, stringr, and forcats.   \"tidyverse\",    # Provides tools for scaling data and formatting axes and legends in ggplot2.               \"scales\",    # Extends ggplot2 to provide better label placement, avoiding overlaps.               \"ggrepel\",   # Converts country names and codes between different formats.               \"countrycode\",   # Provides access to World Bank data & World Development Indicators.               \"WDI\",    # Converts statistical analysis objects from R into tidy data frames.               \"broom\",   # A graphics device for R that produces high-quality, anti-aliased output.               \"ragg\",    # A package manager for R that makes it easier to install and manage packages.               \"pak\",   # Provides support for a standardized way to encode spatial vector data.               \"sf\",    # Provides access to Natural Earth map data.               \"rnaturalearth\",    # Contains the actual data for the rnaturalearth package.               \"rnaturalearthdata\"   ) install.packages(setdiff(packages, rownames(installed.packages())))  # Install iomthemes with pak pak::pkg_install(\"iom/iomthemes\") # Load required packages library(iomthemes) library(tidyverse) library(countrycode) library(WDI) library(ggrepel) library(sf) library(rnaturalearth) library(rnaturalearthdata)"},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"demo-data","dir":"Articles","previous_headings":"","what":"Demo Data","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"tutorial, make relevant IOM context, ’ll use Statistics Global Migration provided Population Division United Nations Department Economic Social Affairs (UNDESA). estimates number (“stock”) international migrants disaggregated age, sex country area origin based national statistics, cases obtained population censuses. Additionally, population registers nationally representative surveys provided information number composition international migrants. dataset presents estimates international migrant age, sex origin. Estimates presented 1990, 1995, 2000, 2005, 2010, 2015 2020 available 232 countries areas world. estimates based official statistics foreign-born foreign population. dataset conveniently directly included package. script , can also learn basic data preparation steps loading data Excel. demonstrate line charts usage, use data global remittance leveraging dedicated package WPI work directly World Bank Inidcators Data API","code":"# turn-off scientific notation like 1e+48 options(scipen = 999)   ## The files are within the 'inst' - installation folder of the package file.sex.destination.origin <- system.file(   \"undesa_pd_2020_ims_stock_by_sex_destination_and_origin.xlsx\",                                            package = \"iomthemes\")  data.sex.destination.origin <- readxl::read_excel(file.sex.destination.origin,                                           sheet = \"Table 1\", skip = 9) |>   ## Getting clean variable names   janitor::clean_names() |>   ## Renaming correctly the variables - let's get the variable names we have   # dput(names(data.sex.destination.origin))   ## List of variable we can keep   #  \"index\",    # \"region_development_group_country_or_area_of_destination\",    # \"notes_of_destination\",   # \"location_code_of_destination\",   # \"type_of_data_of_destination\",    # \"region_development_group_country_or_area_of_origin\",   # \"location_code_of_origin\"   dplyr::rename(     ## Both Sex     \"total.1990\"=\"x1990_8\", \"total.1995\"=\"x1995_9\",     \"total.2000\"= \"x2000_10\", \"total.2005\"=\"x2005_11\",     \"total.2010\"=\"x2010_12\", \"total.2015\"=\"x2015_13\",     \"total.2020\"=\"x2020_14\",     ## Male     \"male.1990\"=\"x1990_15\", \"male.1995\"=\"x1995_16\",     \"male.2000\"=\"x2000_17\", \"male.2005\"=\"x2005_18\",     \"male.2010\"=\"x2010_19\", \"male.2015\"=\"x2015_20\",     \"male.2020\"=\"x2020_21\",     ## Male     \"female.1990\"=\"x1990_22\", \"female.1995\"=\"x1995_23\",     \"female.2000\"=\"x2000_24\", \"female.2005\"=\"x2005_25\",     \"female.2010\"=\"x2010_26\", \"female.2015\"=\"x2015_27\",     \"female.2020\"=\"x2020_28\")|>   # Add ISO2 country code to identify the country level records and   # have a key to join for mapping purpose   dplyr::mutate( origin.iso2 = countrycode::countrycode(     location_code_of_origin,     origin = \"un\",     destination = \"iso2c\"),     destination.iso2 = countrycode::countrycode(       location_code_of_destination,       origin = \"un\",       destination = \"iso2c\"))  ## The second key file from UNDESA file.age.sex.destination <- system.file(\"undesa_pd_2020_ims_stock_by_age_sex_and_destination.xlsx\",                                         package = \"iomthemes\")  ## Age & Sex breakdown for migrants data.age.sex.destination.mig <-   readxl::read_excel(file.age.sex.destination,                                                 sheet = \"Table 1\", skip = 9)|>   ## Getting clean variable names   janitor::clean_names()|>   ## Renaming correctly the variables   # dput(names(data.age.sex.destination.mig))   #   \"index\", \"year\", \"region_development_group_country_or_area\",    # \"notes\", \"location_code\", \"type_of_data\",   dplyr::rename(     ## Both Sex     \"total.age.0_4\"=\"x0_4_7\", \"total.age.5_9\"=\"x5_9_8\",     \"total.age.10_14\"=\"x10_14_9\", \"total.15_19\"=\"x15_19_10\",     \"total.age.20_24\"=\"x20_24_11\", \"total.age.25_29\"=\"x25_29_12\",     \"total.age.30_34\"=\"x30_34_13\", \"total.age.35_39\"= \"x35_39_14\",     \"total.age.40_44\"=\"x40_44_15\", \"total.age.45_49\"=\"x45_49_16\",     \"total.age.50_54\"=\"x50_54_17\", \"total.age.55_59\"=\"x55_59_18\",     \"total.age.60_64\"=\"x60_64_19\", \"total.age.65_69\"=\"x65_69_20\",     \"total.age.70_74\"=\"x70_74_21\", \"total.age.75+\"=\"x75_22\",     \"total.age.all\"=\"total_23\",          ## Male     \"male.age.0_4\"=\"x0_4_24\",\"male.age.5_9\"= \"x5_9_25\",     \"male.age.10_14\"=\"x10_14_26\",\"male.age.15_19\"= \"x15_19_27\",     \"male.age.20_24\"=\"x20_24_28\", \"male.age.25_29\"= \"x25_29_29\",     \"male.age.30_34\"=\"x30_34_30\", \"male.age.35_39\"=\"x35_39_31\",     \"male.age.40_44\"=\"x40_44_32\", \"male.age.45_49\"=\"x45_49_33\",     \"male.age.50_54\"=\"x50_54_34\",\"male.age.55_59\"=\"x55_59_35\",     \"male.age.60_64\"=\"x60_64_36\", \"male.age.65_69\"=\"x65_69_37\",     \"male.age.70_74\"=\"x70_74_38\",\"male.age.75+\"=\"x75_39\",     \"male.age.all\"=\"total_40\",          ## Female     \"female.age.0_4\"=\"x0_4_41\",\"female.age.5_9\"= \"x5_9_42\",     \"female.age.10_14\"=\"x10_14_43\",\"female.age.15_19\"= \"x15_19_44\",     \"female.age.20_24\"=\"x20_24_45\", \"female.age.25_29\"=\"x25_29_46\",     \"female.age.30_34\"=\"x30_34_47\", \"female.age.35_39\"= \"x35_39_48\",     \"female.age.40_44\"=\"x40_44_49\", \"female.age.45_49\"= \"x45_49_50\",     \"female.age.50_54\"=\"x50_54_51\", \"female.age.55_59\"=\"x55_59_52\",     \"female.age.60_64\"=\"x60_64_53\", \"female.age.65_69\"=\"x65_69_54\",     \"female.age.70_74\"=\"x70_74_55\",\"female.age.75+\"= \"x75_56\",     \"female.age.all\"=\"total_57\")|>   ## Provide legible labels for Data Source   dplyr::mutate ( type_data_label = dplyr::recode(type_of_data,    \"B\" = \"Estimates Derived from data on the foreign-born population\"  ,    \"B R\" = \"Estimates Derived from data on the foreign-born population +              Forced Displacement/UNHCR\",    \"C\" = \"Estimates Derived from data on foreign citizens\",    \"C B R\" = \"EstimatesDerived from data on the foreign-born population &               on foreign citizens + Forced Displacement/UNHCR\"  ,    \"C R\"  = \"Estimates Derived from data on foreign citizens +               Forced Displacement/UNHCR\"  ,    \"I\"  = \"Inputed Estimates\"  ,    \"I R\" =\"Inputed Estimates + Forced Displacement/UNHCR\"  ),                     destination.iso2 = countrycode::countrycode(                     location_code,                     origin = \"un\",                     destination = \"iso2c\"))  ## Age & Sex breakdown for local population data.age.sex.destination.loc <-   readxl::read_excel(file.age.sex.destination,                                               sheet = \"Table 2\", skip = 9)|>   ## Getting clean variable names   janitor::clean_names()|>   ## Renaming correctly the variables   dplyr::rename(     ## Both Sex     \"total.age.0_4\"=\"x0_4_7\", \"total.age.5_9\"=\"x5_9_8\",     \"total.age.10_14\"=\"x10_14_9\", \"total.15_19\"=\"x15_19_10\",     \"total.age.20_24\"=\"x20_24_11\", \"total.age.25_29\"=\"x25_29_12\",     \"total.age.30_34\"=\"x30_34_13\", \"total.age.35_39\"= \"x35_39_14\",     \"total.age.40_44\"=\"x40_44_15\", \"total.age.45_49\"=\"x45_49_16\",     \"total.age.50_54\"=\"x50_54_17\", \"total.age.55_59\"=\"x55_59_18\",     \"total.age.60_64\"=\"x60_64_19\", \"total.age.65_69\"=\"x65_69_20\",     \"total.age.70_74\"=\"x70_74_21\", \"total.age.75+\"=\"x75_22\",     \"total.age.all\"=\"total_23\",          ## Male     \"male.age.0_4\"=\"x0_4_24\",\"male.age.5_9\"= \"x5_9_25\",     \"male.age.10_14\"=\"x10_14_26\",\"male.age.15_19\"= \"x15_19_27\",     \"male.age.20_24\"=\"x20_24_28\", \"male.age.25_29\"= \"x25_29_29\",     \"male.age.30_34\"=\"x30_34_30\", \"male.age.35_39\"=\"x35_39_31\",     \"male.age.40_44\"=\"x40_44_32\", \"male.age.45_49\"=\"x45_49_33\",     \"male.age.50_54\"=\"x50_54_34\",\"male.age.55_59\"=\"x55_59_35\",     \"male.age.60_64\"=\"x60_64_36\", \"male.age.65_69\"=\"x65_69_37\",     \"male.age.70_74\"=\"x70_74_38\",\"male.age.75+\"=\"x75_39\",     \"male.age.all\"=\"total_40\",          ## Female     \"female.age.0_4\"=\"x0_4_41\",\"female.age.5_9\"= \"x5_9_42\",     \"female.age.10_14\"=\"x10_14_43\",\"female.age.15_19\"= \"x15_19_44\",     \"female.age.20_24\"=\"x20_24_45\", \"female.age.25_29\"=\"x25_29_46\",     \"female.age.30_34\"=\"x30_34_47\", \"female.age.35_39\"= \"x35_39_48\",     \"female.age.40_44\"=\"x40_44_49\", \"female.age.45_49\"= \"x45_49_50\",     \"female.age.50_54\"=\"x50_54_51\", \"female.age.55_59\"=\"x55_59_52\",     \"female.age.60_64\"=\"x60_64_53\", \"female.age.65_69\"=\"x65_69_54\",     \"female.age.70_74\"=\"x70_74_55\",\"female.age.75+\"= \"x75_56\",     \"female.age.all\"=\"total_57\") |>   ## Provide legible labels for Data Source   ## Provide legible labels for Data Source   dplyr::mutate ( type_data_label = dplyr::recode(type_of_data,    \"B\" = \"Estimates Derived from data on the foreign-born population\"  ,    \"B R\" = \"Estimates Derived from data on the foreign-born population +              Forced Displacement/UNHCR\",    \"C\" = \"Estimates Derived from data on foreign citizens\",    \"C B R\" = \"EstimatesDerived from data on the foreign-born population &              on foreign citizens + Forced Displacement/UNHCR\"  ,    \"C R\"  = \"Estimates Derived from data on foreign citizens +               Forced Displacement/UNHCR\"  ,    \"I\"  = \"Inputed Estimates\"  ,    \"I R\" =\"Inputed Estimates + Forced Displacement/UNHCR\"  ),                       destination.iso2 = countrycode::countrycode(                     location_code,                     origin = \"un\",                     destination = \"iso2c\"))   # Set the caption we will use for attribution for all charts below caption <- \"Source: United Nations Department of Economic and Social Affairs,             Population Division. International Migrant Stock (2020)\""},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"find collection charts hopefully inspire . find series practical tips implement design data story telling techniques. actually able adjust plots context just selecting different initial filters data re-adjust . script implemented using coding style leverage {tidyverse}.","code":""},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"bar-chart","dir":"Articles","previous_headings":"Examples","what":"Bar chart","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"key points consider designing bar chart : Start zero baseline! exception. clip axis order highlight disparities top axis. Instead, try recalculating data percentages, try another type chart; Ensure numerical axis labels aligned decimal point; Clearly denote currency units; axis lines present, necessary label data value. However, can useful highlight final value important data points. Convert data rounded, easily digestible values chart labeling Omit axes baselines data values labeled, simpler, better! range data crosses natural numerical milestones, millions billions, set entire chart larger milestone. chart never reflect 1,000 millions. etc. Ensure labels fit neatly bars two lines. Horizontal bar charts help compare long lists values categories. advantage printing long labels without using two lines printing vertical text, required vertical bar. Remember sort data charting readers can easily compare. Labeled values eliminate need grid lines, rounding done make values easy digest. Don’t use 3D effect! Note default, R display data alphabetical order, arranging size instead simple: just wrap reorder() around x y variable want rearrange, specify variable want reorder . E.g. x = reorder(Country, Value2). Ascending order default, can change descending wrapping desc() around variable ’re ordering .","code":""},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"single-bar-chart","dir":"Articles","previous_headings":"Examples > Bar chart","what":"Single bar chart","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"Let’s start creating simple bar chart visualize top 10 countries origin migrants. Preparing data: Plot:  Plot labels:","code":"data <- data.sex.destination.origin |>   # Filter out rows where 'origin.iso2' and 'origin.iso2' is NA (missing)   # We do so to keep only country level records - filter out region subtotal   filter( !(is.na(origin.iso2)) ) |>   filter( !(is.na(destination.iso2)) ) |>   # Group the data by country of origin   group_by(region_development_group_country_or_area_of_origin) |>   # Summarize the total number of migrants for the year 2020 & remove NA!    summarise(total_migrants_2020 = sum(total.2020, na.rm = TRUE)) |>   # Arrange the summarized data in descending order of total migrants   arrange(desc(total_migrants_2020)) |>   # Select the top 10 countries of origin with the highest number of migrants   slice_head(n = 10) p <- data |>   ggplot(     aes(x = reorder(region_development_group_country_or_area_of_origin,                          total_migrants_2020),              y = total_migrants_2020)) +   # Define it as a bar chart and apply IOM color palette   geom_bar(stat = \"identity\",            fill = iom_pal(n = 1, \"pal_blue\"),            width = 0.8) +   # Flip the chart to make it more legible   coord_flip()  +   ## Format the labels for the x axis   scale_y_continuous(     labels = scales::label_number(scale_cut = scales::cut_short_scale())   ) +   labs(     title = \"Main Countries of Migrant Origin\",     subtitle = \"Highlighting the top 10 countries contributing to global                 migration | 2020\",        x = \"Country of Origin\",        y = \"Total Migrants (2020)\",        caption = caption) +   ## and apply IOM theme   theme_iom(grid = \"X\", axis = \"Y\", axis_title = \"X\") p # Plot with labels # We start from the previous plot and adjust it... p1 <- p +    ## Add labels within the chart - we format the labels   geom_text(   aes(     label = scales::label_number(       scale_cut = scales::cut_short_scale(),       accuracy = .1)(total_migrants_2020)  ),     hjust = -.2 )  +   # and apply the theme again   theme_iom(grid = FALSE, axis = \"Y\", axis_text = \"Y\", axis_title = FALSE) # here is the revised plot p1! p1"},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"grouped-bar-chart","dir":"Articles","previous_headings":"Examples > Bar chart","what":"Grouped bar chart","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"Making grouped bar chart similar making bar chart. just need change position = \"identity\" position = \"dodge\", set fill aesthetically instead. Let’s compare migrant population originating different region time. use grouped bar chart. Preparing data: Plot:  Plot labels:","code":"data <- data.sex.destination.origin |>   filter(region_development_group_country_or_area_of_destination %in%            c(\"AFRICA\", \"ASIA\", \"EUROPE\",               \"LATIN AMERICA AND THE CARIBBEAN\",              \"NORTHERN AMERICA\", \"OCEANIA\")) |>   filter(region_development_group_country_or_area_of_origin %in%            c(\"WORLD\")) |>   unique() |>   gather(key = \"year\", value = \"total_migrants\", total.2015:total.2020) |>   mutate(year = as.numeric(sub(\"total.\", \"\", year)))   # Sometimes you need to order your data in a way that isn't alphabetical  # or reordered by size.  # To order these correctly you need to set your data factor levels # before making the plot. # Specify the order you want the categories to be plotted in the  # `levels` argument: p <- data |>   ggplot( aes(x = region_development_group_country_or_area_of_destination,               y = total_migrants,               fill = as.factor(year))) +   geom_col(  width = .7,              position = position_dodge(.8)  ) +   coord_flip()  +   scale_fill_iom_d(direction = -1) +   scale_y_continuous(     labels = scales::label_number(scale_cut = scales::cut_short_scale())  ) +   ## Define the plot title formatted so the color reflects the legend   labs(title =  paste0(          \"Migrant Population Growth by Region: <span style='color:\",          iom_pal(n = 2, \"pal_blue\")[1],          \"'>2015<\/span> and <span style='color:\",          iom_pal(n = 2, \"pal_blue\")[2],          \"'>2020<\/span> by Region of Destination\" ),        subtitle= \"Analyzing changes in migrant populations across                   different regions over five years\",        x = \"Year\",        y = \"\",        fill = \"Destination Region\",        caption = caption) +   theme_iom(     grid = \"X\", axis = \"Y\", axis_title = \"X\",     legend = FALSE  )  p p1 <- p +       scale_y_continuous(     labels = scales::label_number(scale_cut = scales::cut_short_scale()),     ## let's expand scales to add the labels at the right side of the plot     expand = expansion(mult = c(0, .2)) ) +   geom_text(   aes(     label = scales::label_number(       scale_cut = scales::cut_short_scale(),       accuracy = .1)(total_migrants) ),   hjust = -.2,     position = position_dodge(.8) )  +   # apply IOM theme   theme_iom(grid = FALSE,              axis = \"Y\",              axis_text = \"Y\",              axis_title = FALSE,              legend = FALSE) p1"},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"stacked-bar-chart","dir":"Articles","previous_headings":"Examples > Bar chart","what":"Stacked bar chart","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"Let’s make stacked bar chart comparing top 10 countries destination, region Origin, 2020. Preparing data: Plot:","code":"data <- data.sex.destination.origin|> # Filter data for the specified regions of origin and year 2020   filter(region_development_group_country_or_area_of_origin %in%             c(\"AFRICA\", \"ASIA\", \"EUROPE\",               \"LATIN AMERICA AND THE CARIBBEAN\",               \"NORTHERN AMERICA\", \"OCEANIA\"))|>   filter( !(is.na(destination.iso2)) ) |> # Group by destination country and region of origin and sum the total migrants   group_by(region_development_group_country_or_area_of_destination,             region_development_group_country_or_area_of_origin)  |>   summarise(total_migrants_2020 = sum(total.2020, na.rm = TRUE))  |>   ungroup()    # Get the top 10 countries of destination top_10_destinations <- data  |>   group_by(region_development_group_country_or_area_of_destination)  |>   summarise(total_migrants = sum(total_migrants_2020))  |>   arrange(desc(total_migrants)) |>   slice_head(n = 10) |>   pull(region_development_group_country_or_area_of_destination)  # Filter the grouped data for the top 10 destinations top_10_data <- data |>   filter(region_development_group_country_or_area_of_destination %in%            top_10_destinations) # The value passed to the `position` argument will determine if  # your stacked chart shows proportions or actual values.   #`position = \"fill\"` will draw your stacks as proportions, # and `position = \"identity\"` will draw number values.  p <- top_10_data |>   ggplot(      aes(x = reorder(region_development_group_country_or_area_of_destination,                                      total_migrants_2020),          y = total_migrants_2020,          fill = region_development_group_country_or_area_of_origin)) +   geom_bar(stat = \"identity\") +   labs(title = \"Major Destinations for Migrants\",        subtitle = \"Categorized by region of origin | 2020\",        x = \"Country of Destination\",        y = \"Total Migrants\",        fill = \"Region of Origin\") +     scale_y_continuous(  labels = scales::label_number(scale_cut = scales::cut_short_scale()) ) +   scale_fill_viridis_d(  option =\"cividis\"  ) +   theme_iom(     grid = \"X\", axis = \"Y\", axis_title = \"X\",     legend_text_size = 9   ) + coord_flip()   p"},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"population-pyramid","dir":"Articles","previous_headings":"Examples > Bar chart","what":"Population pyramid","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"type chart perfect represent age & gender disagregation. Let’s make population pyramid migrant populations compared local population Europe 2020. Preparing data: Plot:","code":"# Filter data for Europe and the year 2020 migrant <- data.age.sex.destination.mig |>   filter(#region_development_group_country_or_area == \"EUROPE\" &            destination.iso2 == \"GB\" &            year == 2020)|>   select( starts_with(\"male.age\"), starts_with(\"female.age\")) |>   gather(key = \"age_sex\", value = \"count\") |>   separate(age_sex, into = c(\"sex\", \"age_group\"), sep = \"ag\") |>   filter( age_group != \"e.all\"  )|>   mutate(population = \"Migrant\",          count = as.numeric(count),          total = sum(count),          per = round(count / total, 4) *100)   # Select relevant columns and gather data into long format local <- data.age.sex.destination.loc |>   filter(#region_development_group_country_or_area == \"EUROPE\" &            destination.iso2 == \"GB\" &            year == 2020)|>   select( starts_with(\"male.age\"), starts_with(\"female.age\")) |>   gather(key = \"age_sex\", value = \"count\") |>   separate(age_sex, into = c(\"sex\", \"age_group\"), sep = \"ag\") |>   filter( age_group != \"e.all\"  )|>   mutate(population = \"Local\",          count = as.numeric(count),          total = sum(count),          per = round(count / total, 4) *100)  # Combine migrant and local data combined_data <- bind_rows(migrant , local ) |>    #\"e.0_4\"  \"e.5_9\"   \"e.10_14\" \"e.20_24\" \"e.25_29\" \"e.30_34\"   # \"e.35_39\" \"e.40_44\" \"e.45_49\"  \"e.50_54\" #\"e.55_59\" \"e.60_64\" \"e.65_69\" \"e.70_74\" \"e.75+\" mutate(ageclass = case_when( str_detect(age_group, \"e.0_4\") ~ \"0-4\",                              str_detect(age_group, \"e.5_9\") ~ \"5-9\",                              str_detect(age_group, \"e.10_14\") ~ \"10-14\",                              str_detect(age_group, \"e.15_19\") ~ \"15-19\",                              str_detect(age_group, \"e.20_24\") ~ \"20-24\",                              str_detect(age_group, \"e.25_29\") ~ \"25-29\",                              str_detect(age_group, \"e.30_34\") ~ \"30-34\",                              str_detect(age_group, \"e.35_39\") ~ \"35-39\",                              str_detect(age_group, \"e.40_44\") ~ \"40-44\",                              str_detect(age_group, \"e.45_49\") ~ \"45-49\",                              str_detect(age_group, \"e.50_54\") ~ \"50-54\",                              str_detect(age_group, \"e.55_59\") ~ \"55-59\",                              str_detect(age_group, \"e.60_64\") ~ \"60-64\",                              str_detect(age_group, \"e.65_69\") ~ \"65-69\",                              str_detect(age_group, \"e.70_74\") ~ \"70-74\",                              str_detect(age_group, \"e.75+\") ~ \"75+\"),        ageclass= factor(ageclass , levels = c(          \"0-4\",  \"5-9\", \"10-14\",          \"15-19\",  \"20-24\",  \"25-29\",           \"30-34\",  \"35-39\",  \"40-44\",           \"45-49\",  \"50-54\", \"55-59\",          \"60-64\",  \"65-69\",  \"70-74\",  \"75+\"))) # Create the population pyramid ggplot(combined_data, aes(x = ageclass, y = per)) +   geom_bar(data = combined_data |>               filter(population == \"Migrant\" &                             sex==\"female.\"  ),            aes(  y =   per),            stat = \"identity\",            #alpha =0.6,             fill =  iom_pal(n = 1, \"pal_blue\")) +   geom_bar(data = combined_data |>              filter(population == \"Migrant\" &                           sex==\"male.\"  ),            aes(  y = - per),            #alpha =0.6,            fill = iom_pal(n = 1, \"pal_navy\"),            stat = \"identity\") +   geom_segment(data = combined_data |>              filter(population == \"Local\" &                       sex==\"female.\"  ),            aes( yend =  per  ),            #alpha =0.3,            lineend = \"round\", linewidth =2,            colour =  \"#CCCCCC\",            stat = \"identity\" ) +   geom_segment(data = combined_data |>              filter(population == \"Local\" &                       sex==\"male.\"  ),            aes(  yend  = - per  ),            #alpha =0.3,            lineend = \"round\", linewidth =2,            colour = \"#CCCCCC\",            stat = \"identity\" ) +   coord_flip() +   scale_y_continuous(expand = expansion(c(0.2, 0.2))) +   scale_x_discrete(expand = expansion(c(0, 0.1))) +   #coord_cartesian(clip = \"off\") +   labs(title = \"In Great Britain, Migrants predominantly fall                     within working-age groups\",        subtitle = \"Age Distribution of Migrant (bar) vs.                  Local Populations (line) | 2020\",        x = \"Age Group\",        y = \"Population Count\",        fill = \"Sex\") +   scale_y_continuous(labels = abs)+   annotate(\"text\", y = -.04, x = 17, label = \"Male\",            size = 12 / .pt,              hjust = 1, color = iom_pal(n = 1, \"pal_navy\")) +   annotate(\"text\", y = .04, x = 17, label = \"Female\",            size = 12 / .pt,              hjust = 0, color = iom_pal(n = 1, \"pal_blue\")) +   theme_iom(     axis_text = \"Y\", axis_title = FALSE, grid = FALSE   )"},{"path":[]},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"single-column","dir":"Articles","previous_headings":"Examples > Column chart","what":"Single column","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"column chart quite similar bar chart, bars vertical. Let’s make column chart last 10 years total refugee population. Preparing data: Plot:  Plot labels:","code":"# Gather the data to long format for ggplot2 data <- data.sex.destination.origin |>   filter(region_development_group_country_or_area_of_destination == \"WORLD\" &            region_development_group_country_or_area_of_origin == \"WORLD\")|>   gather(key = \"year\", value = \"total_migrants\", total.1990:total.2020) |>   mutate(year = as.numeric(sub(\"total.\", \"\", year)))|>  # Summarize the total migrant population for each year   group_by(year) |>   summarise(total_migrants = sum(total_migrants, na.rm = TRUE)) |>   mutate(year = as_factor(year)) p <- data |> ggplot( aes(x = year, y = total_migrants)) +   geom_col( fill = iom_pal(n = 1, \"pal_blue\")) +       scale_y_continuous(          expand = expansion(mult = c(0, .1)),         labels = scales::label_number(scale_cut = scales::cut_short_scale())       ) +   labs(title = \"Over three decades, the numbers of migrants                     has almost doubled\",        subtitle = \"Trends in Global Migrant Population\",        x = \"Year\",        y = \"Total Migrants\",        caption = caption) +      theme_iom(grid = \"Y\", axis = \"X\", axis_title = FALSE)  p ## We can just add some instructions on the top of the previously created plot # Plot with labels p1 <- p  +   geom_text(     aes(       label = scales::label_number(         scale_cut = scales::cut_short_scale(),         accuracy = .1       )(total_migrants)     ),     vjust = -.4   ) p1"},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"grouped-column","dir":"Articles","previous_headings":"Examples > Column chart","what":"Grouped column","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"Let’s compare Migrant population different regions. use grouped column chart. Preparing data: Plot:  Plot labels:","code":"data <- data.sex.destination.origin |>   filter(region_development_group_country_or_area_of_destination == \"WORLD\" &            region_development_group_country_or_area_of_origin %in%            c(\"Eastern Africa\",              \"Middle Africa\",              \"Northern Africa\",              \"Southern Africa\",              \"Western Africa\"))|>   gather(key = \"year\", value = \"total_migrants\", total.2005:total.2020) |>   mutate(year = as.numeric(sub(\"total.\", \"\", year)))|>   # Summarize the total migrant population for each year   group_by(year,region_development_group_country_or_area_of_origin) |>   summarise(total_migrants = sum(total_migrants, na.rm = TRUE)) |>   mutate( region = factor(region_development_group_country_or_area_of_origin,                           levels = c(                             \"Northern Africa\",                             \"Western Africa\",                             \"Eastern Africa\",                             \"Middle Africa\",                             \"Southern Africa\"))) p <- data |>   ggplot( aes(x = year, y = total_migrants,               fill = region)) +   geom_col(              position = position_dodge(4), ) +   scale_y_continuous(     expand = expansion(mult = c(0, .1)),     labels = scales::label_number(scale_cut = scales::cut_short_scale())   ) +   scale_fill_viridis_d(  option =\"cividis\"  ) +   labs(title = \"Eastern Africa now ranks as the second                  region of Origin for Migrants from Africa\",        subtitle = \"Migrant Population Trends from African Regions\",                x = \"Year\",        y = \"Total Migrants\",        caption = caption) +   theme_iom(grid = \"Y\", axis = \"X\", axis_title = FALSE) p # Plot with labels p1 <- p +   geom_text(     aes(       label = scales::label_number(         scale = .000001,         accuracy = .1,         suffix = \"M\"       )(total_migrants)     ),     position = position_dodge(4),     size = 2,     vjust = -.3   )   p1"},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"stacked-column","dir":"Articles","previous_headings":"Examples > Column chart","what":"Stacked column","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"Let’s plot total migrant population region destination 1990 2020. Preparing data: Plot:","code":"data <- data.sex.destination.origin |>   filter(region_development_group_country_or_area_of_origin == \"WORLD\" &           region_development_group_country_or_area_of_destination %in%            c(\"AFRICA\", \"ASIA\", \"EUROPE\",              \"LATIN AMERICA AND THE CARIBBEAN\",               \"NORTHERN AMERICA\", \"OCEANIA\"))|>   gather(key = \"year\", value = \"total_migrants\", total.1990:total.2020) |>   mutate(year = as.numeric(sub(\"total.\", \"\", year)))|>   # Summarize the total migrant population for each year   group_by(year,region_development_group_country_or_area_of_destination) |>   summarise(total_migrants = sum(total_migrants, na.rm = TRUE))   |>   mutate(      region = factor(region_development_group_country_or_area_of_destination,                           levels = c(                             \"EUROPE\",                             \"ASIA\",                             \"NORTHERN AMERICA\",                             \"LATIN AMERICA AND THE CARIBBEAN\",                             \"AFRICA\",                              \"OCEANIA\"))) data |>   ggplot( aes(x = year, y = total_migrants,               fill = region)) +   geom_col( position = position_stack(reverse = TRUE) ) +   scale_y_continuous(     expand = expansion(mult = c(0, .1)),     labels = scales::label_number(scale_cut = scales::cut_short_scale())   ) +   scale_fill_viridis_d(  option =\"cividis\"  ) +   labs(title = \"Migrant Population Distribution by Destination Region\",        x = \"Year\",        y = \"Total Migrants\",        caption = caption) +   theme_iom(grid = \"Y\", axis = \"X\", axis_title = FALSE,     legend_text_size = 9   ) +   guides(fill = guide_legend(ncol = 3))"},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"stacked-column-1","dir":"Articles","previous_headings":"Examples > Column chart","what":"100% stacked column","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"Let’s create 100% stacked column chart showing total refugee population last 10 years, three UNHCR regions Africa. Preparing data: Plot:","code":"data <- data.sex.destination.origin |>   filter(region_development_group_country_or_area_of_origin == \"WORLD\" &           region_development_group_country_or_area_of_destination %in%            c(\"AFRICA\", \"ASIA\", \"EUROPE\", \"LATIN AMERICA AND THE CARIBBEAN\", \"NORTHERN AMERICA\", \"OCEANIA\"))|>   gather(key = \"year\", value = \"total_migrants\", total.1990:total.2020) |>   mutate(year = as.numeric(sub(\"total.\", \"\", year)))|>   # Summarize the total migrant population for each year   group_by(year,region_development_group_country_or_area_of_destination) |>   summarise(total_migrants = sum(total_migrants, na.rm = TRUE))   |>   mutate(percent_migrants = total_migrants/ sum(total_migrants, na.rm = TRUE))   |>   mutate( region = factor(region_development_group_country_or_area_of_destination,                           levels = c(                             \"EUROPE\",                             \"ASIA\",                             \"NORTHERN AMERICA\",                             \"LATIN AMERICA AND THE CARIBBEAN\",                             \"AFRICA\",                              \"OCEANIA\"))) data |>   ggplot( aes(x = year, y = percent_migrants,               fill = region)) +   geom_col( position = position_stack(reverse = TRUE) ) +   scale_y_continuous(     expand = expansion(mult = c(0, .1)),     labels = scales::label_percent()   ) +   scale_fill_viridis_d(  option =\"cividis\"  ) +   labs(title = \"Evolution of Migrant Population per Region of Destination\",        x = \"Year\",        y = \"Total Migrants\",        caption = caption) +   theme_iom(grid = \"Y\", axis = \"X\", axis_title = FALSE,     legend_text_size = 9   ) +   guides(fill = guide_legend(ncol = 3))"},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"line-chart","dir":"Articles","previous_headings":"Examples","what":"Line chart","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"key points consider designing bar chart : purpose line chart show trend. often best solution data presents time series referring single value changes regular intervals. Choose y-axis scale appropriately can see trend. flat obscures message exaggerated overstates trend. right height two-thirds chart area. weight fever line thick enough stand grid line still thin enough show twists turns line. Keep grid lines thin. Unlike bar chart, fever line necessarily require zero baseline. data trend won’t discernible starting zero baseline. Avoid labeling long distance, legend separated line requires readers extra work cross-referencing key line. Label lines directly. Direct labeling allows reader identify lines quickly focus comparing contrasting patterns. Use legend space tight lines intersect extensively. order legend match ranking end points since current data points. Annotations help clarify message.","code":""},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"single-line","dir":"Articles","previous_headings":"Examples > Line chart","what":"Single line","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"Let’s plot evolution total remittance. Preparing data: Plot:","code":"# Fetch data from the World Bank API remittance_data <- WDI::WDI(indicator = \"BX.TRF.PWKR.CD.DT\",                              start = 1990,                              end = 2023)  # Summarize the data to get the total remittances worldwide for each year global_remittance_data <- remittance_data |>   # filter(!country %in% c(\"World\", \"High income\", \"Low income\", \"Middle income\",    #                        \"Upper middle income\", \"Lower middle income\",    #                        \"East Asia & Pacific\",    #                        \"Europe & Central Asia\", \"Latin America & Caribbean\",    #                        \"Middle East & North Africa\",   #                        \"South Asia\", \"Sub-Saharan Africa\")) |>   filter(country %in% c(\"World\")) |>   group_by(year) |>   summarise(total_remittances = sum(BX.TRF.PWKR.CD.DT, na.rm = TRUE)) ggplot(global_remittance_data, aes(x = year, y = total_remittances)) +   geom_line(     color = iom_pal(n = 1, \"pal_blue\"),     linewidth =2) +    labs(title = paste0(\"With now \",                       global_remittance_data |>                          filter(year == max(year)) |>                         pull(total_remittances) |>                          sum() |>                         scales::label_number(                           scale_cut = scales::cut_short_scale())(),   \" USD, the Amount of Annual Global Remittance has been multiplied by \",                  round(max(global_remittance_data$total_remittances) / min(global_remittance_data$total_remittances),0), \" since 1990\"),          subtitle = \"Global Flow of personal transfers and compensation of employees                 across Countries in USD\",        x = \"Year\",        y = \"Total Remittances (Current US$)\",        caption = \"Personal transfers consist of all current transfers in cash or     in kind made or received by resident households to or from nonresident     households. Personal transfers thus include all current transfers between     resident and nonresident individuals. Compensation of employees refers to     the income of border, seasonal, and other short-term workers who are      employed in an economy where they are not resident and of residents employed     by nonresident entities.      Source: World bank Data - Indicator BX.TRF.PWKR.CD.DT\") +    #scale_x_discrete( breaks = scales::pretty_breaks(n = 5)   ) +   scale_y_continuous( labels = scales::label_number(scale_cut = scales::cut_short_scale())) +   theme_iom(grid = \"Y\", axis = \"X\", axis_title = FALSE)"},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"multiple-line","dir":"Articles","previous_headings":"Examples > Line chart","what":"Multiple line","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"additional points consider designing multiple line chart; Don’t use dashed lines shape markers differentiate line! can use solid lines exclusively limiting chart four fewer lines. Varying weights shades work differentiating lines effectively distracting patterns markers. single chart, keep maximum number lines three possibly four lines intersecting many points. purpose multiple-line chart compare contrast different data series. important line one color lines shades second colors. Let’s plot comparison total remittance Development Aid. Preparing data: Plot:  Plot labels:","code":"ssa_remittance <- remittance_data |>  filter(country %in% c(\"South Asia\")) |>   #filter(country %in% c(\"Sub-Saharan Africa (IDA & IBRD countries)\")) |>  #  filter(country %in% c(\"Heavily indebted poor countries (HIPC)\")) |>   group_by(year) |>   summarise(total_remittances = sum(BX.TRF.PWKR.CD.DT, na.rm = TRUE))  # Fetch data from the World Bank API for public development aid funding  ##We could use DT.ODA.OATL.KD Net official aid received (constant 2021 US$) # Development Assistance Committee of  Organisation for Economic Co-operation  # and Development, Geographical Distribution of Financial Flows to Developing  # Countries, Development Co-operation Report, and International Development  # Statistics database  ##  DT.ODA.ALLD.CD -- Net official development assistance and  # official aid received (current US$)  oda_data <- WDI::WDI(indicator = \"DT.ODA.ALLD.CD\", start = 1990, end = 2020)  # Summarize data to get the total public development aid funding for each year ssa_oda  <- oda_data |>  filter(country %in% c(\"South Asia\")) |>   #filter(country %in% c(\"Sub-Saharan Africa (IDA & IBRD countries)\")) |>  #  filter(country %in% c(\"Heavily indebted poor countries (HIPC)\")) |>   group_by(year) |>   summarise(public_development_aid = sum(DT.ODA.ALLD.CD, na.rm = TRUE))  # Combine the two data sets combined_data <- left_join(ssa_oda, ssa_remittance, by = \"year\") # Plot ggplot(combined_data, aes(x = year)) +   geom_line(aes(y = public_development_aid),             color = iom_pal(n = 1, \"pal_green\"),             linewidth =2) +   geom_line(aes(y = total_remittances),              color = iom_pal(n = 1, \"pal_blue\"),             linewidth =2) +   labs(     title = paste0(\"In South Asia, <span style='color:\",           iom_pal(n = 1, \"pal_blue\"), \"'>\",           \"Personal Remittance<\/span> amounts are now \",           round(combined_data |>                    filter(year == max(year)) |>                   pull(total_remittances) /                   combined_data |>                    filter(year == max(year)) |>                   pull(public_development_aid), 0),             \" bigger than <span style='color:\",           iom_pal(n = 1, \"pal_green\"), \"'>\",           \"Official Development & Aid Assistance<\/span>\") ,     x = \"Year\",     y = \"Funding (Current US$)\",     caption = \"Source: World bank Data -                 Indicator BX.TRF.PWKR.CD.DT & DT.ODA.ALLD.CD\") +   scale_y_continuous(     labels = scales::label_number(scale_cut = scales::cut_short_scale()),      expand = expansion(mult = c(0.1, .1))   ) +    theme_iom(grid = \"Y\", axis = \"X\", axis_title = FALSE, legend = FALSE) # Plot with labels # Summarize the data to get the total remittances worldwide for each year global_remittance_data_income <- remittance_data |>   # filter(country %in% c(  \"High income\", \"Low income\", \"Middle income\",    #                         \"Upper middle income\", \"Lower middle income\" )) |>   filter(country %in% c(   \"Africa Eastern and Southern\",                           \"Africa Western and Central\",                             \"Middle East & North Africa\" ) ) |>   # filter(country %in% c( \"East Asia & Pacific\",    #                        \"Europe & Central Asia\",    #                        \"Latin America & Caribbean\",    #                        \"Middle East & North Africa\",   #                        \"North America\",   #                        \"South Asia\",    #                        \"Sub-Saharan Africa\")) |>    group_by(year, country) |>   summarise(total_remittances = sum(BX.TRF.PWKR.CD.DT, na.rm = TRUE))  ## check total   # Plot global_remittance_data_income |>   ggplot( aes(x = year,                y = total_remittances,               color = country)) +   geom_line(linewidth =2) +    geom_text(     data = filter(global_remittance_data_income, year == 2023),     aes( label = stringr::str_wrap(country, 20),          color = country ),     hjust = 0,     nudge_x = 0.15,   ) +   scale_y_continuous(     labels = scales::label_number(scale_cut = scales::cut_short_scale()),     ## let's expand scales to add the labels at the right side of the plot     expand = expansion(mult = c(0, .01)) ) +     scale_x_continuous(expand = expansion(mult = c(0, .32))  ) +   labs(title = \"The ability to benefit and rely on remittance do vary\",     subtitle = \"Evolution of Remittances per Region in Africa (USD)\",      x = \"Year\",      y = \"Total Remittances (Current US$)\",      caption = \"Personal remittances comprise personal transfers                 and compensation of employees.                   Source: World bank Data - Indicator BX.TRF.PWKR.CD.DT\") +    #scale_x_discrete( breaks = scales::pretty_breaks(n = 5)   ) +   theme_iom(     grid = \"Y\", axis = \"X\", axis_title = FALSE, legend = FALSE,     plot_margin = margin(12, 40, 12, 12)   )"},{"path":[]},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"single-area","dir":"Articles","previous_headings":"Examples > Area chart","what":"Single area","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"Let’s plot evolution total number Migrants. Preparing data: Plot:","code":"data <- data.sex.destination.origin |>   filter(region_development_group_country_or_area_of_destination == \"WORLD\" &            region_development_group_country_or_area_of_origin == \"WORLD\")|>   gather(key = \"year\", value = \"total_migrants\", total.1990:total.2020) |>   mutate(year = as.numeric(sub(\"total.\", \"\", year))) |>  # Summarize the total migrant population for each year   group_by(year) |>   summarise(total_migrants = sum(total_migrants, na.rm = TRUE))  %>%   mutate(data_type = \"Observed\")  ## a good story here could be to show how thing would like following the trend # Calculate the slope for linear extrapolation slope <- data %>%   summarise(slope = (last(total_migrants) - nth(total_migrants, -2)) / (last(year) - nth(year, -2))) %>%   pull(slope)  # Expand the table after 2020 only every five years up to 2100 using linear extrapolation expanded_migrants <- tibble(   year = seq(2020, 2040, by = 5),   total_migrants = last(data$total_migrants) +                          slope * (seq(2020, 2040, by = 5) -                                     last(data$year)) )  %>%   mutate(data_type=\"Extrapolated\")  # Combine the original and expanded data combined_data <- bind_rows(data, expanded_migrants) %>%   arrange(year)#|>  # mutate(year = as_factor(year)) combined_data |>   ggplot( aes(x = factor(year),               y = total_migrants,               group = 1 )) +    geom_area(     data = combined_data |> filter( data_type == \"Observed\"),     alpha = 0.7,     fill = \"#0033A0\" ) +      geom_line(     data = combined_data |> filter( data_type == \"Observed\"),      color = \"#0033A0\",     linewidth =2) +      geom_area(     data = combined_data |> filter( data_type == \"Extrapolated\"),     alpha = 0.3,     fill = \"#8F9DF7\" ) +       geom_line(     data = combined_data |> filter( data_type == \"Extrapolated\"),      color = \"#8F9DF7\", linetype = \"dashed\",     linewidth =2) +      scale_y_continuous(      expand = expansion(mult = c(0, .1)),     labels = scales::label_number(scale_cut = scales::cut_short_scale())  ) +   labs(        title = paste0(          scales::label_number(scale_cut = scales::cut_short_scale())(combined_data |> filter( data_type == \"Extrapolated\" & year == 2020) |> pull(total_migrants)),         \" migrants in 2020 and potentially up to \",                                          scales::label_number(scale_cut = scales::cut_short_scale())(combined_data |> filter( data_type == \"Extrapolated\" & year ==2040) |> pull(total_migrants)),                               \" migrants in 2040\"),        subtitle = \"Growth of the Global Migrant Population\",        x = \"Year\",        y = \"Total Migrants\",        caption = caption) +    theme_iom(grid = \"y\",              axis = \"x\",             axis_ticks = \"x\",             axis_title = FALSE,              legend = FALSE)"},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"stacked-area","dir":"Articles","previous_headings":"Examples > Area chart","what":"Stacked area","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"Let’s plot evolution total migrants according Economic level country Origin. Preparing data: Plot:","code":"#dput(levels(as.factor(data.sex.destination.origin$region_development_group_country_or_area_of_origin)))  data <- data.sex.destination.origin |>   filter(region_development_group_country_or_area_of_destination == \"WORLD\" &            region_development_group_country_or_area_of_origin %in% c(     \"High-income countries\",  \"Middle-income countries\",  \"Low-income countries\" )  )|>   gather(key = \"year\", value = \"total_migrants\", total.1990:total.2020) |>   mutate(year = as.numeric(sub(\"total.\", \"\", year)))|>  # Summarize the total migrant population for each year   group_by(year, region_development_group_country_or_area_of_origin) |>   summarise(total_migrants = sum(total_migrants, na.rm = TRUE)) |>   mutate(year = as_factor(year)) |>   mutate( region = factor(region_development_group_country_or_area_of_origin,                           levels = c(  \"High-income countries\",                                        \"Middle-income countries\",                                        \"Low-income countries\"))) p <- data |>   ggplot( aes(x = year,               y = total_migrants,               group = region,               fill = region)) +   geom_area( alpha = 0.9) +   scale_y_continuous(      expand = expansion(mult = c(0, .1)),     labels = scales::label_number(scale_cut = scales::cut_short_scale())  ) +   labs(title = \"Migration is predominant in Middle Income Countries\",        subtitle = \"Total Migrant Population per Destination\",        x = \"Year\",        y = \"Total Migrants\",        caption = caption) +    theme_iom(grid = \"Y\", axis = \"X\", axis_title = FALSE)+   guides(fill = guide_legend(ncol = 3))  p"},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"pie-chart","dir":"Articles","previous_headings":"Examples","what":"Pie chart","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"Let’s plot percentage migrants & refugees within world population. Preparing data: Plot:  Donut Plot:","code":"data_population <- WDI::WDI(indicator = \"SP.POP.TOTL\",                             start = 1990,                             end = 2020) |>   filter(country %in% c(\"World\")) |>   group_by(year) |>   summarise(population = sum(SP.POP.TOTL, na.rm = TRUE))  data_refugee <- WDI::WDI(indicator = \"SM.POP.REFG\",                           start = 1990,                           end = 2020) |>   filter(country %in% c(\"World\")) |>   group_by(year) |>   summarise(refugee = sum(SM.POP.REFG, na.rm = TRUE))  data_migrants <- data.sex.destination.origin |>   filter(region_development_group_country_or_area_of_destination == \"WORLD\" &            region_development_group_country_or_area_of_origin == \"WORLD\")|>   gather(key = \"year\", value = \"total_migrants\", total.1990:total.2020) |>   mutate(year = as.numeric(sub(\"total.\", \"\", year))) |>   # Summarize the total migrant population for each year   group_by(year) |>   summarise(migrants = sum(total_migrants, na.rm = TRUE))  |>   ungroup()    # Combine the data frames combined_data <- data_migrants |>   left_join(data_refugee, by = \"year\")  |>   left_join(data_population, by = \"year\")  |>   mutate(     Migrants = round((migrants / population),3) ,     Refugees = round((refugee / population),3) ,     Population = 1 - Migrants -  Refugees )  |>   filter( year == 2020) |>   gather(key = \"type\", value = \"percent\", Migrants, Refugees, Population)|>   select(year, type, percent) combined_data |> # Plot ggplot(  aes( x = 1,               y = percent,               fill = type )) +   geom_col() +   ggrepel::geom_label_repel(     data = combined_data |> filter( type %in% c(\"Migrants\", \"Refugees\")),     aes(       label = paste0(type, \"\\n\", scales::label_percent()(percent)),       y = cumsum(percent) - percent / 2),     x = 1,     fill = \"#ffffff\",      color=\"black\",      segment.colour=\"grey\",     arrow = arrow(length = unit(0.01, \"npc\")),     box.padding = 1 ) +   scale_fill_iom_d( nmax = 3, order = c(2, 1)) +   coord_polar( theta = \"y\", direction = -1  ) +   labs(     title = \"Less than 4% of the World Population              is actually migrating internationally\",     caption = caption   ) +   theme_iom(void = TRUE, legend = FALSE) combined_data |> # Plot ggplot(  aes( x = 1,               y = percent,               fill = type )) +   geom_col() +   ## labels ussing ggrepel   ggrepel::geom_label_repel(     data = combined_data |> filter( type %in% c(\"Migrants\", \"Refugees\")),     aes(       label = paste0(type, \"\\n\", scales::label_percent()(percent)),       y = cumsum(percent) - percent ),     x = 1,     fill = \"#ffffff\",      color=\"black\",      # segment.colour=\"grey\",     # arrow = arrow(length = unit(0.01, \"npc\")),     box.padding = 1 ) +    scale_fill_iom_d( nmax = 3, order = c(2, 1)) +   scale_color_iom_d(nmax = 3, order = c(2, 1)) +   scale_x_continuous(  expand = expansion(mult = c(0.8, 0.2))) +   coord_polar(     theta = \"y\",     direction = -1,     clip = \"off\"  ) +   labs(     title = \"96% of the World Population is not migrating\",     caption = caption   ) +   theme_iom(void = TRUE, legend = FALSE)"},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"maps","dir":"Articles","previous_headings":"Examples","what":"Maps","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"map graphic representation scale model spatial concepts. means conveying geographic information. Maps universal medium communication, easily understood appreciated people, regardless language culture. Maps realistic representations actual world. maps estimations, generalizations, interpretations true geographic conditions. One key rule creating map : Absolute value: Proportional symbol Relative value (ratio): Choropleth Ggplot2 amazing capacity work directly geographic information.","code":"# Get world map data from rnaturalearth world <- ne_countries(scale = \"medium\", returnclass = \"sf\") |>   # Remove Antarctica   dplyr::filter(sovereignt != \"Antarctica\") |>   # Transform the world map to Bertin 1953 projection   # sf::st_transform(world, crs = \"+proj=bertin1953\")   # Transform the world map to Robinson projection   sf::st_transform(world, crs = \"ESRI:54030\")  ## Better alternative centroid <- read.csv(\"https://github.com/gavinr/world-countries-centroids/raw/refs/heads/master/dist/countries.csv\")  ## Remove centroid for sub territories centroid.unique <- centroid |>   dplyr::filter( ISO == AFF_ISO )|>   dplyr::filter( COUNTRY != \"Canarias\" ) |>   # Convert to an sf object   sf::st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326)  |>   # Transform the coordinates   sf::st_transform(crs = \"ESRI:54030\") |>   # Extract the transformed coordinates back into separate columns   #centroid.unique1 <- centroid.unique   # Extract the transformed coordinates back into separate columns   dplyr::mutate(long = sf::st_coordinates(geometry)[,1],                 lat = sf::st_coordinates(geometry)[,2])"},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"proportional-symbols","dir":"Articles","previous_headings":"Examples > Maps","what":"Proportional Symbols","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"","code":"# Summarize the total migrant population for each country of destination in 2020 summary_data <- data.sex.destination.origin %>%   dplyr::filter(! is.na(\"destination.iso2\")) |>   group_by(region_development_group_country_or_area_of_destination, destination.iso2) %>%   summarise(total = sum(total.2020, na.rm = TRUE))  # Merge the data merged_data <- summary_data %>%   left_join(centroid.unique, by = c( \"destination.iso2\"=\"ISO\" ))   # Create natural breaks for the value classes breaks <- classInt::classIntervals(merged_data$total, n = 5, style = \"jenks\")$brks labels <- paste0(\"(\", round(breaks[-length(breaks)], 1), \" - \", round(breaks[-1], 1), \"]\")  label_top_10 <-  merged_data  |>   dplyr::arrange(desc(total)) |>   dplyr::filter( !(is.na(\"COUNTRY\"))) |>   dplyr::slice_head(n = 10) |>   dplyr::mutate( label = paste0(     destination.iso2, \": \",     scales::label_number(accuracy = 1, scale_cut = scales::cut_short_scale())(total),     \" \"))   # Plot the world map with proportional symbols at centroids ggplot(data = world) +   geom_sf(fill = \"lightgray\", alpha = 0.8, color = \"white\") +   coord_sf() +   geom_point(data = merged_data,              aes(x = long,                  y = lat,                  size = total),              color = \"#0033A0\", alpha = 0.5) +   scale_size_continuous(range = c(1, 40),breaks = 1:5, labels = labels) + #   # ggrepel::geom_label_repel(data = label_top_10,   #                           aes(x = long,   #                               y = lat,   #                               # label = scales::label_number(accuracy = 1, scale_cut = cut_short_scale())(total))   #                               label = label)    ) +   labs(     title = \"Total Migrant Population per Country of Destination in 2020\",     # subtitle = paste0(\"Données Lissées pour 2024/25 - Estimation pour un an: \",     #                   scales::label_number(     #                     accuracy = 1,     #                     scale_cut = scales::cut_short_scale())     #                   (sum(summary_data$total)),     #                   \"$\"),     x=\"\",     y = \"\",    # caption = caption,     size = \"Value\") +    theme_iom(void = TRUE, legend = FALSE)"},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"choropleth","dir":"Articles","previous_headings":"Examples > Maps","what":"Choropleth","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"Net Annual Migration per 1,000 population (average 2015/2020)","code":"# Calculate Net Annual Migration per 1,000 population (average 2015/2020) data <- data.sex.destination.origin %>%   mutate(net_migration_per_1000 = ((total.2020 - total.2015) / total.2015) * (100 / (2020 - 2015))) %>%  # Summarize the net migration per 1,000 population for each country of destination   dplyr::filter(! is.na(\"destination.iso2\")) |>   group_by(region_development_group_country_or_area_of_destination,            destination.iso2) %>%    summarise(net_migration_per_1000 = sum(net_migration_per_1000, na.rm = TRUE))   # Merge the data with the world map merged_data <- world %>%   left_join(data, by = c(\"iso_a2\" = \"destination.iso2\"))  # Plot the proportional map ggplot(merged_data) +   geom_sf(aes(fill = net_migration_per_1000)) +   scale_fill_viridis_c(option = \"plasma\",                         na.value = \"grey50\") +   labs(title = \"Net Annual Migration per 1,000 population\",        subtitle = \"Average 2015/2020\",        fill = \"Total Migrants\") +    theme_iom(void = TRUE, legend = FALSE)"},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"flow-maps","dir":"Articles","previous_headings":"Examples > Maps","what":"Flow Maps","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"Flow map can used generate curved arrows, size adjusted magniture flow. now build map top 10 country--country migration corridor destination country european union 2020","code":""},{"path":[]},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"scatter-plot","dir":"Articles","previous_headings":"Examples > Association","what":"Scatter Plot","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"Scatter plot used check correlation. trend line can added compare two set measures determine one set goes , set correspondingly goes strongly. Scatter plot also good way identify clusters observation.","code":"# Fetch Human Development Index (HDI) data human_capital_data <- WDI::WDI(indicator = \"HD.HCI.OVRL\", start = 2020, end = 2020)  remt_Per_data <- WDI::WDI(indicator = \"BX.TRF.PWKR.DT.GD.ZS\", start = 2020, end = 2020)    # Combine the data combined_data <- human_capital_data |>   filter(!is.na(HD.HCI.OVRL)) |>   left_join(remt_Per_data, by = c(\"iso2c\", \"year\")) |>    mutate( region = countrycode::countrycode(iso2c,                                              origin = \"iso2c\",                                              destination = \"region\")) |>   arrange( desc (BX.TRF.PWKR.DT.GD.ZS)) |>   slice_head(n = 20)  # Create the scatter plot ggplot(combined_data, aes(x = HD.HCI.OVRL, y = BX.TRF.PWKR.DT.GD.ZS, color = region)) +   geom_point() +   ## labels ussing ggrepel   ggrepel::geom_label_repel(     aes(  label = country.x),     fill = \"#ffffff\",      color=\"black\",      size = 2,     # segment.colour=\"grey\",     # arrow = arrow(length = unit(0.01, \"npc\")),     box.padding = 1 ) +   scale_y_continuous(      expand = expansion(mult = c(0, .1)),     labels = scales::label_number(scale_cut = scales::cut_short_scale())  ) +   labs(title = \"Remittances vs Human Capital Index (2020)\",        x = \"Human Capital Index (HCI)\",        y = \"Remittances (% of GDP)\",        color = \"Region\",         caption = \"Source: World Bank Global Development Data - data.worldbank.org - HD.HCI.OVRL / BX.TRF.PWKR.DT.GD.ZS \") +   theme_iom( legend = FALSE)"},{"path":[]},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"other-charts","dir":"Articles","previous_headings":"Examples","what":"Other Charts","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"less common type charts can created help ggplot2 iomthemes packages require extra packages. needed, code install extra packages provided.","code":""},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"treemap","dir":"Articles","previous_headings":"Examples > Other Charts","what":"Treemap","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"Let’s make treemap migrant region origin 2022 G7 Countries. use {treemapify} package. Preparing data: Plot:","code":"g7_countries_iso <- c(\"US\", \"CA\", \"FR\", \"DE\", \"IT\", \"JP\", \"GB\")  data_g7 <- data.sex.destination.origin |>   filter(destination.iso2 %in% g7_countries_iso &            region_development_group_country_or_area_of_origin %in% c(\"AFRICA\", \"ASIA\", \"EUROPE\",                                                                      \"LATIN AMERICA AND THE CARIBBEAN\",                                                                      \"NORTHERN AMERICA\", \"OCEANIA\"))  # Summarize the total number of migrants by region of origin summary_data <- data_g7 |>   group_by(region_development_group_country_or_area_of_destination, region_development_group_country_or_area_of_origin) |>   summarise(total_migrants = sum(total.2020, na.rm = TRUE)) # Create the treemap with two levels: G7 countries and region of origin ggplot(summary_data, aes(area = total_migrants, fill = region_development_group_country_or_area_of_origin,                           subgroup = region_development_group_country_or_area_of_destination,                           label = region_development_group_country_or_area_of_origin)) +   treemapify::geom_treemap() +   treemapify::geom_treemap_subgroup_border(colour = \"white\") +   ## The labels   treemapify::geom_treemap_subgroup_text(place = \"topleft\",                                           #grow = TRUE,                                           colour = \"white\",                                           size = 11,                                          fontface = \"bold\") +   treemapify::geom_treemap_text(colour = \"white\",                                 place = \"centre\",                                  #grow = TRUE,                                  alpha = 0.5,                                  size = 8,                                 fontface = \"italic\") +   labs(title = \"Migrants Origin Reflects Country History!\",        subtitle = \"Migrants Region of Origin for G7 Countries | 2020\",        fill = \"Region of Origin\",        caption = caption) +   theme_iom(void = TRUE, legend = FALSE)"},{"path":[]},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"streamgraph","dir":"Articles","previous_headings":"Examples > Other Charts","what":"Streamgraph","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"Let’s make streamgraph showing evolution populations assisted UNHCR 1993 2022. use {ggstream} package. Preparing data: Plot:","code":"data <- data.sex.destination.origin  |>   filter(region_development_group_country_or_area_of_destination == \"WORLD\" &            region_development_group_country_or_area_of_origin %in% c(\"AFRICA\", \"ASIA\", \"EUROPE\",                                                                      \"LATIN AMERICA AND THE CARIBBEAN\",                                                                      \"NORTHERN AMERICA\", \"OCEANIA\")) |>   gather(key = \"year\", value = \"total_migrants\", total.1990:total.2020) |>   mutate(year = as.numeric(sub(\"total.\", \"\", year)),          ## reorderign the factor levels so it displays better in the chart                 region.origin = factor(region_development_group_country_or_area_of_origin ,                                           levels = c(\"LATIN AMERICA AND THE CARIBBEAN\",                                                      \"NORTHERN AMERICA\",\"AFRICA\",                                                      \"ASIA\", \"EUROPE\", \"OCEANIA\"))) |> # Summarize the total migrant population for each region of destination and year   group_by(region.origin, year) |>   summarise(total_migrants = sum(total_migrants, na.rm = TRUE)) |>   ungroup()  # Complete the data to fill in missing years # create a smoother streamgraph by interpolating the data points complete_data <- data |>   group_by(region.origin) |>   complete(year = full_seq(year, 1)) |>   fill(total_migrants, .direction = \"downup\")    #sum(data |> filter(year == \"2020\") |> pull(total_migrants)) # Install if needed and load package # install.packages(\"ggstream\") library(ggstream) # Create the streamgraph ggplot(complete_data, aes(x = year,                   y = total_migrants,                   fill = region.origin,                   group = region.origin)) +   ggstream::geom_stream(color = 1, lwd = 0.15, alpha = 0.7) +   ggstream::geom_stream_label(             aes(label = stringr::str_wrap(region.origin, 20) ),             size = 3, n_grid = 100 ) +  # scale_x_discrete( breaks = scales::pretty_breaks(n = 5)) +   scale_y_continuous( labels = scales::label_number(scale_cut = scales::cut_short_scale())) +   labs(title = \"Most international migration do orginate from Asia!\",        subtitle = \"Evolution of the number of Migrants per Region of Origin\",        x = \" \",        y = \" \",        fill = \"Region of Destination\",        caption = caption) +   theme_iom( legend = FALSE, axis_text = \"x\")"},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"slope","dir":"Articles","previous_headings":"Examples > Other Charts","what":"Slope","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"Slop plot (also known Dumbbell chart, Connected dot plot) great displaying changes two points time, two conditions differences two groups. Let’s create slope chart showing evolution total refugee population 2017 2022 countries East Horn Africa region. Preparing data: Plot:","code":"# Keep only 2017 and 2022 records, Load and join region names, # Keep only countries in East and Horn of Africa region, data <- data.sex.destination.origin |>   filter( !(is.na(origin.iso2)) ) |>   filter( !(is.na(destination.iso2)) ) |>   select(region_development_group_country_or_area_of_origin,          region_development_group_country_or_area_of_destination,          total.2010, total.2020) |>   mutate( ass = paste0( \"From \",region_development_group_country_or_area_of_origin,                         \" To \",                         region_development_group_country_or_area_of_destination )) |>   select( ass, total.2010, total.2020)  top_2020 <- data |>             arrange(desc(total.2020)) |>             slice_head(n = 10) top_2010 <- data |>             arrange(desc(total.2010)) |>             slice_head(n = 10)  data_merge <- rbind(top_2020, top_2010 ) |>   unique() |>   mutate( type = dplyr::case_when(     (ass %in% top_2020$ass) & (ass %in% top_2010$ass) ~ \"Constant\",     (ass %in% top_2020$ass) & !(ass %in% top_2010$ass) ~ \"Up\",     !(ass %in% top_2020$ass) & (ass %in% top_2010$ass) ~ \"Down\",     .default = \"other\"   ))  # Create a DataFrame for the slope chart slope_data <- data_merge |>   pivot_longer(cols = c(total.2010, total.2020), names_to = \"year\", values_to = \"total_migrants\") |>   mutate(year = recode(year, \"total.2010\" = \"2010\", \"total.2020\" = \"2020\")) # Create the slope chart ggplot(slope_data, aes(x = year,                        y = total_migrants,                        group = ass,                        color = type) )+   geom_line(size = 1) +   geom_point(size = 2) +   ggrepel::geom_text_repel( data = slope_data |> filter( year == \"2020\"),             aes(label = stringr::str_wrap(ass, 90)),             #color = \"black\",            hjust = 0,            vjust = 1,            size = 3, nudge_x = 1,            direction = \"y\",            segment.size = 0.2,            segment.color = \"grey50\") +   scale_y_continuous( labels = scales::label_number(scale_cut = scales::cut_short_scale())) +   labs(title = \"Trends in International Migration Corridors\",        subtitle = \"Top country-to-country Associations\",        x = \"Year\",        y = \"Total Migrants\",        color = \"Country of Origin\",        caption = caption) +   scale_x_discrete( expand = expansion(mult = c(0, .6)) ) +   theme_iom( grid = \"X\", legend = FALSE)"},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"facets","dir":"Articles","previous_headings":"Examples","what":"Facets","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"Small multiple charts easy create ggplot: ’s called faceting. four data series, array individual charts can display pattern allows better comparison among lines. data want visualize split variable, need use facet_wrap facet_grid. Add variable want divide line code: facet_wrap( ~ variable). additional argument facet wrap, ncol, allows specify number columns. may noticed chart Oceania, relatively small population, disappeared completely. default, faceting uses fixed axis scales across small multiples. ’s always best use y axis scale across small multiples, avoid misleading, sometimes may need set independently multiple, can adding argument scales = \"free\". just want free scales one axis set argument free_x free_y.","code":""},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"annotation","dir":"Articles","previous_headings":"Examples","what":"Annotation","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"highlight data points within chart, annotations way forward.","code":""},{"path":"https://iom.github.io/iomthemes/articles/iomthemes.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Creating IOM-Branded Data Visualizations with {iomthemes}","text":"trust R package equipped tools needed craft visually appealing data stories ease. need support, using package, please post issue repository. proposals additional examples add, please submit pull request.","code":""},{"path":"https://iom.github.io/iomthemes/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edouard Legoupil. Author, maintainer. . Copyright holder.","code":""},{"path":"https://iom.github.io/iomthemes/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Legoupil E (2024). iomthemes: IOM 'ggplot2' Theme Colour Palettes. R package version 0.1.1, https://iom.github.io/iomthemes/, https://github.com/iom/iomthemes.","code":"@Manual{,   title = {iomthemes: IOM 'ggplot2' Theme and Colour Palettes},   author = {Edouard Legoupil},   year = {2024},   note = {R package version 0.1.1, https://iom.github.io/iomthemes/},   url = {https://github.com/iom/iomthemes}, }"},{"path":"https://iom.github.io/iomthemes/index.html","id":"iomthemes","dir":"","previous_headings":"","what":"IOM ggplot2 Theme and Colour Palettes","title":"IOM ggplot2 Theme and Colour Palettes","text":"Saving lives protecting people move, Driving solutions displacement, Facilitating pathways regular migration. iomthemes R package aims simplifying creation data visualizations data stories. package offers comprehensive ggplot2 theme, including built-customization color palettes. designed quickly align reproducible plots IOM Visual Branding Recommendations.","code":""},{"path":"https://iom.github.io/iomthemes/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"IOM ggplot2 Theme and Colour Palettes","text":"package yet available CRAN. Retrieve development version Github using pak package:","code":"install.packages(\"pak\") pak::pkg_install(\"iom/iomthemes\")"},{"path":"https://iom.github.io/iomthemes/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"IOM ggplot2 Theme and Colour Palettes","text":"loading iomthemes package, can apply theme ggplot2 chart, simply either adding specific color one palette use one color scaling functions theme_iom() end plot. example using excel demo dataset UNDESA bundled within package.  can explore examples iomthemes action package vignette. package can used conjunction {iomdown} make reproducible reports {iomquarto} develop web pages, presentation data scrolly-telling.","code":"library(tidyverse) library(iomthemes)  readxl::read_excel(system.file(   \"undesa_pd_2020_ims_stock_by_sex_destination_and_origin.xlsx\",                                            package = \"iomthemes\"),   sheet = \"Table 1\", skip = 9) |>   ## Getting clean variable names   janitor::clean_names() |>   dplyr::rename(\"total.2020\"=\"x2020_14\")|>   # Add ISO2 country code to identify the country level records    dplyr::mutate(      origin.iso2 = countrycode::countrycode(                     location_code_of_origin,                     origin = \"un\",                     destination = \"iso2c\"),     destination.iso2 = countrycode::countrycode(                     location_code_of_destination,                     origin = \"un\",                     destination = \"iso2c\")) |>   # Filter out rows where 'origin.iso2' and 'origin.iso2' is NA (missing)   # We do so to keep only country level records - filter out region subtotal   filter( !(is.na(origin.iso2)) ) |>   filter( !(is.na(destination.iso2)) ) |>   # Group the data by country of origin   group_by(region_development_group_country_or_area_of_origin) |>   # Summarize the total number of migrants for the year 2020 & remove NA!    summarise(total_migrants_2020 = sum(total.2020, na.rm = TRUE)) |>   # Arrange the summarized data in descending order of total migrants   arrange(desc(total_migrants_2020)) |>   # Select the top 10 countries of origin with the highest number of migrants   slice_head(n = 10)  |>   ggplot(     aes(x = reorder(region_development_group_country_or_area_of_origin,                     total_migrants_2020),              y = total_migrants_2020)) +   # Define it as a bar chart and apply IOM color palette   geom_bar(stat = \"identity\",            ## Apply IOM color palette!            fill = iomthemes::iom_pal(n = 1, name= \"pal_blue\"),            width = 0.8) +   # Flip the chart to make it more legible   coord_flip()  +   ## Format the labels for the x axis   scale_y_continuous(     labels = scales::label_number(scale_cut = scales::cut_short_scale())) +   labs(     title = \"Main Countries of Migrant Origin\",     subtitle = \"Highlighting the top 10 countries contributing to global                 migration | 2020\",        x = \"Country of Origin\",        y = \"Total Migrants (2020)\",        caption = \"Source: United Nations Department of Economic and Social Affairs,             Population Division. International Migrant Stock (2020)\") +   ## and apply IOM theme   iomthemes::theme_iom(grid = \"X\", axis = \"Y\", axis_title = \"X\")"},{"path":"https://iom.github.io/iomthemes/index.html","id":"contribution-and-code-of-conduct","dir":"","previous_headings":"","what":"Contribution and Code of Conduct","title":"IOM ggplot2 Theme and Colour Palettes","text":"Contributions iomthemes highly valued. ensure welcoming inclusive community, follow Contributor Code Conduct. suggestions, uncover bugs, envision new features, kindly submit issue GitHub. contribute code, hesitate fork repository create pull request. Note package maintained Fusen package. functions document dev/fusen_dev.Rmd","code":""},{"path":"https://iom.github.io/iomthemes/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"IOM ggplot2 Theme and Colour Palettes","text":"package distributed MIT License.","code":""},{"path":"https://iom.github.io/iomthemes/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"IOM ggplot2 Theme and Colour Palettes","text":"package build Open Source work done many contributors. Credits goes work former colleague, Cedric Vidonne, main author unhcrthemes.","code":""},{"path":"https://iom.github.io/iomthemes/reference/iom_pal.html","id":null,"dir":"Reference","previous_headings":"","what":"IOM Color Palettes — iom_pal","title":"IOM Color Palettes — iom_pal","text":"Creates color palette IOM branding.","code":""},{"path":"https://iom.github.io/iomthemes/reference/iom_pal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IOM Color Palettes — iom_pal","text":"","code":"iom_pal(n = NULL, name, ...)"},{"path":"https://iom.github.io/iomthemes/reference/iom_pal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IOM Color Palettes — iom_pal","text":"n Integer. Number different colors palette. Minimum depends palette (2), maximum depends palette (5, 7, 10). NULL, maximum number colors palette used. name Character. palette name IOM branding. : 2 qualitative palettes - pal_iom pal_iom_region 5 sequential palettes - pal_blue, pal_navy, pal_green, pal_red, pal_yellow, pal_grey 2 diverging palette - pal_blue_red & pal_navy_rev ... Additional arguments passed grDevices::colorRampPalette.","code":""},{"path":"https://iom.github.io/iomthemes/reference/iom_pal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IOM Color Palettes — iom_pal","text":"character vector hex color codes representing palette.","code":""},{"path":"https://iom.github.io/iomthemes/reference/iom_pal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"IOM Color Palettes — iom_pal","text":"function generates color palette based specified IOM branding palette name. number colors n within valid range palette, warnings issued closest valid number colors used.","code":""},{"path":"https://iom.github.io/iomthemes/reference/iom_pal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IOM Color Palettes — iom_pal","text":"","code":"# Display all IOM color palette with filters  # Qualitative Palette: # When to Use: Use a qualitative palette when you have categorical data, # meaning data that represents different groups or categories without any # inherent order. # Example: Different colors for different countries iom_pal_display_all(type = \"qualitative\")  iom_pal(n =3, \"pal_iom\") #> [1] \"#18375F\" \"#0033A0\" \"#A0C6FF\"  # Sequential Palette: # When to Use: Use a sequential palette when you have numerical data that # progresses from low to high. This type of palette shows a gradient of  # colors, usually from light to dark. #Example: Temperature changes over a year, population density, or income levels. iom_pal_display_all(n = 3, type = \"sequential\")  iom_pal_display_all(n = 5, type = \"sequential\")  iom_pal(3, \"pal_blue\") #> [1] \"#A0C6FF\" \"#70B0FF\" \"#418FDE\" iom_pal(5, \"pal_navy\") #> [1] \"#E0E9FE\" \"#B8C9EE\" \"#8395B9\" \"#506489\" \"#18375F\" iom_pal(12, \"pal_red\") #>  [1] \"#FFE1E1\" \"#FFCDCE\" \"#FFBABB\" \"#FFA5A7\" \"#FF898D\" \"#FF6D73\" \"#F6555C\" #>  [8] \"#E64048\" \"#D62B34\" \"#BF252E\" \"#A6242B\" \"#8E2429\"  # Diverging Palette: # When to Use: Use a diverging palette when you have numerical data with a  # meaningful midpoint, such as zero, and you want to show variation on both  # sides of this midpoint. # Example: Anomalies (deviations from a norm), # survey responses ranging from negative to positive. # for diverging palette, you can not get more than 9 different colors iom_pal_display_all(type = \"diverging\")"},{"path":"https://iom.github.io/iomthemes/reference/iom_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"IOM ggplot2 color scales — scale_color_iom_c","title":"IOM ggplot2 color scales — scale_color_iom_c","text":"Color scales help differentiate data points, making easier identify patterns, trends, outliers.","code":""},{"path":"https://iom.github.io/iomthemes/reference/iom_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IOM ggplot2 color scales — scale_color_iom_c","text":"","code":"scale_color_iom_c(   ...,   palette = 1,   direction = 1,   na.value = \"#E9E9E9\",   guide = \"colourbar\" )  scale_color_iom_d(   ...,   palette = 1,   direction = 1,   nmax = NULL,   order = NULL,   na.value = \"#E9E9E9\" )  scale_color_iom_b(   ...,   palette = 1,   direction = 1,   nmax = NULL,   order = NULL,   na.value = \"#E9E9E9\",   guide = \"coloursteps\" )  scale_colour_iom_c(   ...,   palette = 1,   direction = 1,   na.value = \"#E9E9E9\",   guide = \"colourbar\" )  scale_colour_iom_d(   ...,   palette = 1,   direction = 1,   nmax = NULL,   order = NULL,   na.value = \"#E9E9E9\" )  scale_colour_iom_b(   ...,   palette = 1,   direction = 1,   nmax = NULL,   order = NULL,   na.value = \"#E9E9E9\",   guide = \"coloursteps\" )  scale_fill_iom_c(   ...,   palette = 1,   direction = 1,   na.value = \"#E9E9E9\",   guide = \"colourbar\" )  scale_fill_iom_d(   ...,   palette = 1,   direction = 1,   nmax = NULL,   order = NULL,   na.value = \"#E9E9E9\" )  scale_fill_iom_b(   ...,   palette = 1,   direction = 1,   nmax = NULL,   order = NULL,   na.value = \"#E9E9E9\",   guide = \"coloursteps\" )"},{"path":"https://iom.github.io/iomthemes/reference/iom_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IOM ggplot2 color scales — scale_color_iom_c","text":"... arguments passed discrete_scale() continuous_scale() control name, limits, breaks, labels forth palette string, use named palette. can IOM brandied palettes: 2 qualitative palettes - pal_iom pal_iom_region 5 sequential palettes - pal_blue, pal_navy, pal_green, pal_red, pal_yellow, pal_grey 2 diverging palette - pal_blue_red & pal_navy_rev number, index list palettes appropriate type direction Sets order colors scale. 1, default, colors output iom_pal(). -1, order colors reversed na.value Missing values replaced value. guide function used create guide name. See guides() information. nmax Maximum number different colors palette contain. provided, calculated automatically data. order Numeric vector listing order colors used. Default 1:nmax.","code":""},{"path":"https://iom.github.io/iomthemes/reference/iom_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IOM ggplot2 color scales — scale_color_iom_c","text":"discrete, continuous binned Scale object","code":""},{"path":"https://iom.github.io/iomthemes/reference/iom_scale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"IOM ggplot2 color scales — scale_color_iom_c","text":"need select right type color scale depending data Discrete Color Scales:scale_..._iom_d -  Use categorical data  require qualitative color palette. Continuous Color Scales: scale_..._iom_c -Use numerical data progresses low high require sequential color palette. Diverging Color Scales: scale_..._iom_b - Use data meaningful midpoint require diverging color palette. depending geometry use, either fill color - combination","code":""},{"path":"https://iom.github.io/iomthemes/reference/iom_scale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IOM ggplot2 color scales — scale_color_iom_c","text":"","code":"library(ggplot2) library(iomthemes)   # Discrete Color Scales:scale_..._iom_d -  Use these when you have  #     categorical data  and that require a qualitative color palette.   df <- data.frame(   date = factor(rep(2010:2020, 2)),   val = c(     10.2, 10.2, 10.2, 11.5, 14,     15.8, 17, 19.5, 20.5, 24.5, 20.6,     4.9, 4.9, 4.9, 5.5, 5.5, 5.6,     5.6, 5.7, 5.7, 5.8, 5.9   ),   set = rep(c(\"Set 1\", \"Set 2\"), each = 11) ) ggplot(   data = df,   aes(x = date, y = val, fill = set) ) +   geom_col(     position = position_stack(reverse = TRUE),     width = 0.8   ) +   labs(     title = \"My title including                <span style='color:#0033A0;'>highlight color<\/span> | 2010-2020\",     subtitle = \"My really subtitle that will cover more than one line and               that will be automatically wrapped thanks to ggtext so I don't                have to manually put a line break\",     y = \"values\",     caption = \"Note: As it's HTML text the line break symbol is                not '\\\\n'<br>Source: Dummy data\"   ) +   scale_y_continuous(     expand = expansion(c(0, 0.01))   ) +   scale_fill_iom_d() +   theme_iom(     grid = \"Y\",     axis = \"X\",     axis_title = \"Y\"   ) #> Warning: OS is not Windows. No fonts registered with windowsFonts(). #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database   # Continuous Color Scales: scale_..._iom_c -Use these for numerical data that progresses #  from low to high and that require a sequential color palette.   # Diverging Color Scales: scale_..._iom_b - Use these when you have data  # 'with a meaningful midpoint and that require a diverging color palette."},{"path":"https://iom.github.io/iomthemes/reference/iomthemes-package.html","id":null,"dir":"Reference","previous_headings":"","what":"iomthemes: IOM 'ggplot2' Theme and Colour Palettes — iomthemes-package","title":"iomthemes: IOM 'ggplot2' Theme and Colour Palettes — iomthemes-package","text":"'ggplot2' theme color palettes following IOM visual branding recommendations.","code":""},{"path":[]},{"path":"https://iom.github.io/iomthemes/reference/iomthemes-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"iomthemes: IOM 'ggplot2' Theme and Colour Palettes — iomthemes-package","text":"Maintainer: Edouard Legoupil elegoupil@iom.int contributors: IOM [copyright holder]","code":""},{"path":"https://iom.github.io/iomthemes/reference/theme_iom.html","id":null,"dir":"Reference","previous_headings":"","what":"IOM ggplot2 theme — theme_iom","title":"IOM ggplot2 theme — theme_iom","text":"theme_iom provides basic IOM theme use ggplot2 commands.","code":""},{"path":"https://iom.github.io/iomthemes/reference/theme_iom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IOM ggplot2 theme — theme_iom","text":"","code":"theme_iom(   font_family = if (package_font_installed()) \"Open Sans\" else \"Arial\",   font_size = 12,   plot_title_size = rel(1.35),   plot_title_margin = font_size,   subtitle_size = font_size,   subtitle_margin = font_size * 1.5,   strip_text_size = rel(0.9),   strip_text_face = \"bold\",   strip_text_just = 0,   caption_size = rel(0.7),   caption_margin = font_size,   axis_text = TRUE,   axis_text_size = rel(0.9),   axis_title = TRUE,   axis_title_size = rel(0.9),   axis = FALSE,   axis_ticks = FALSE,   grid = \"XY\",   legend = TRUE,   legend_text_size = rel(0.9),   legend_title = FALSE,   legend_title_size = rel(0.9),   plot_margin = margin(font_size, font_size, font_size, font_size),   plot_background = \"#ffffff\",   void = FALSE )"},{"path":"https://iom.github.io/iomthemes/reference/theme_iom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"IOM ggplot2 theme — theme_iom","text":"font_family Base font family \"Open Sans\". need \"Open Sans\" font installed device order use . font_size Base font size pt. Default 12 pts. plot_title_size Plot title font size. Default font_size * 1.35. plot_title_margin Plot title bottom margin. Default font_size. subtitle_size Plot subtitle font size. Default font_size. subtitle_margin Plot subtitle bottom margin. Default font_size * 1.5. strip_text_size Facet label font size. Default font_size * 0.9. strip_text_face Facet label font face. Default \"bold\". strip_text_just Facet label justification. Default 0. caption_size Caption font size. Default font_size * 0.7. caption_margin Caption top margin. Default font_size. axis_text Logical TRUE/FALSE xy. Turn axis label. Use x y correspondent active. Default TRUE. axis_text_size Axis label font size. Default font_size * 0.9. axis_title Logical TRUE/FALSE xy. Turn axis title. Use x y correspondent active. Default TRUE. axis_title_size Axis title font size. Default font_size * 0.9. axis Logical TRUE/FALSE xy. Turn axis. Use x y correspondent axis active. forget review expand argument scale_x_*/scale_y_* avoid spacing axis baseline plot. Default FALSE. axis_ticks Logical TRUE/FALSE xy. Turn axis ticks. Use x y correspondent axis ticks active. Default FALSE. grid Logical TRUE/FALSE combination X x Y y. Turn panel grids. Use XorYfor major grids, andxoryfor minor grid.  Default toXY`. legend Logical TRUE/FALSE. Turn legend. Default TRUE. legend_text_size Legend key font size. Default font_size * 0.9. legend_title Logical TRUE/FALSE. Turn legend title. Default FALSE. legend_title_size Legend title font size. Default font_size * 0.9. plot_margin Plot margin (specify ggplot2::margin()). Default ggplot2::margin(font_size, font_size, font_size, font_size). plot_background Plot background. Put \"transparent\" background color. Default \"white\". void Logical TRUE/FALSE. TRUE, grid lines, ticks axes removed. Default FALSE.","code":""},{"path":"https://iom.github.io/iomthemes/reference/theme_iom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"IOM ggplot2 theme — theme_iom","text":"ggplot2 theme object, theme style.","code":""},{"path":"https://iom.github.io/iomthemes/reference/theme_iom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"IOM ggplot2 theme — theme_iom","text":"","code":"## Usage  #After loading the `{iomthemes}` package, you can apply the theme to  # any `{ggplot2}` chart, by simply adding `theme_iom` at your call.   # For example:  # Load packages library(ggplot2) library(iomthemes)  # A dummy data frame df <- data.frame(   date = factor(rep(2010:2020, 2)),   val = c(     10.2, 10.2, 10.2, 11.5, 14,     15.8, 17, 19.5, 20.5, 24.5, 20.6,     4.9, 4.9, 4.9, 5.5, 5.5, 5.6,     5.6, 5.7, 5.7, 5.8, 5.9   ),   set = rep(c(\"Set 1\", \"Set 2\"), each = 11) )  # Base plot with theme_iom() ggplot(   data = df,   aes(x = date, y = val, fill = set) ) +   geom_col(     position = position_stack(reverse = TRUE),     width = 0.8   ) +   labs(     title = \"My title | 2010-2020\",     subtitle = \"My subtitle\",     x = \"date\",     y = \"values\",     caption = \"Source: Dummy data\"   ) +   theme_iom() #> Warning: OS is not Windows. No fonts registered with windowsFonts(). #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database   # The theme comes with some default settings, but you can customize most of it #by adding parameters to the function call, as we will explore below.  ## Grid  # The `grid` parameter controls the display of both major and minor grid lines  #in your plot. By default, major grid lines are visible and minor ones are hidden. #  # Using `grid = \"XY\"` adds both major X and Y grid lines, `grid = \"X\"` adds # only major X grid lines, `grid = \"Y\"` adds only major Y grid lines,  #and `grid = FALSE` removes all grid lines.  # You can add minor grid lines by using lowercase `\"xy\"`, `\"x\"` or `\"y\"`.   #For example, letb   ggplot(   data = df,   aes(x = date, y = val, fill = set) ) +   geom_col(     position = position_stack(reverse = TRUE),     width = 0.8   ) +   labs(     title = \"My title | 2010-2020\",     subtitle = \"My subtitle\",     x = \"date\",     y = \"values\",     caption = \"Source: Dummy data\"   ) +   theme_iom(     grid = \"Y\" # Only major Y grid lines   ) #> Warning: OS is not Windows. No fonts registered with windowsFonts(). #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database     # # Axis  # Unsurprisingly, the axis represents the axis lines. However, it also includes #different axis elements such as the axis title, axis text, and axis ticks.  ### Axis lines  #To control the visibility of axis lines, you can use the `axis` parameter  # in the `theme_iom` function. By default, this parameter is set to `FALSE`, # which turns off all the axis lines. Using `axis = \"XY\"` (or `axis = TRUE`) # adds both X and Y axis, `axis = \"X\"` adds only the X axis, `axis = \"Y\"`  #adds only the Y axis, and `axis = FALSE` removes all axis elements.   #For example, let's add only the X axis:    ggplot(   data = df,   aes(x = date, y = val, fill = set) ) +   geom_col(     position = position_stack(reverse = TRUE),     width = 0.8   ) +   labs(     title = \"My title | 2010-2020\",     subtitle = \"My subtitle\",     x = \"date\",     y = \"values\",     caption = \"Source: Dummy data\"   ) +   theme_iom(     grid = \"Y\",     axis = \"X\" # Only X axis   ) #> Warning: OS is not Windows. No fonts registered with windowsFonts(). #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database    # Some space is missing! This is because `{ggplot2}` comes, by default,  # with some expansion around the axis to create some room.  # To remove this extra space, you can use the `expand` argument  # in the `scale_x_*` or `scale_y_*` function. #  # **Modify the axis expansion:** #  # In this example, we will set the `expand` argument to `expansion(c(0, 0.01))`  # for the y axis to remove the unwanted space, effectively b # by removing the space at the axis origin and adding a small padding  # at the other end.  ggplot(   data = df,   aes(x = date, y = val, fill = set) ) +   geom_col(     position = position_stack(reverse = TRUE),     width = 0.8   ) +   labs(     title = \"My title | 2010-2020\",     subtitle = \"My subtitle\",     x = \"date\",     y = \"values\",     caption = \"Source: Dummy data\"   ) +   scale_y_continuous(     expand = expansion(c(0, 0.01)) # Remove axis expansion   ) +   theme_iom(     grid = \"Y\",     axis = \"X\"   ) #> Warning: OS is not Windows. No fonts registered with windowsFonts(). #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database     ### Axis title and text  #To control the visibility of axis titles and text, you can use the `axis_title` # and `axis_text` parameters in the `theme_iom` function. By default,  #these parameters are set to `TRUE`, which turns on all the axis titles and  # text. Using `axis_title = FALSE` removes both X and Y axis titles, # `axis_title = \"X\"` adds only the X axis title, `axis_title = \"Y\"` adds  # only the Y axis title, and `axis_title = TRUE` adds all axis titles.  # Similarly, `axis_text = TRUE` adds both X and Y axis text, `axis_text = \"X\"` # adds only the X axis text, `axis_text = \"Y\"` adds only the Y axis text, #and `axis_text = FALSE` removes all axis text.   #For example, let's keep only the Y axis title:   ggplot(   data = df,   aes(x = date, y = val, fill = set) ) +   geom_col(     position = position_stack(reverse = TRUE),     width = 0.8   ) +   labs(     title = \"My title | 2010-2020\",     subtitle = \"My subtitle\",     y = \"values\",     caption = \"Source: Dummy data\"   ) +   scale_y_continuous(     expand = expansion(c(0, 0.01))   ) +   theme_iom(     grid = \"Y\",     axis = \"X\",     axis_title = \"Y\" # Only Y axis title   ) #> Warning: OS is not Windows. No fonts registered with windowsFonts(). #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database  # ### Axis ticks  #Axis ticks can sometimes be useful. To control the visibility of axis ticks, # you can use the `axis_ticks` parameter in the `theme_iom` function. # By default, this parameter is set to `FALSE`, which turns off all the  # axis ticks. Using `axis_ticks = TRUE` adds both X and Y axis ticks,  # `axis_ticks = \"X\"` adds only the X axis ticks, `axis_ticks = \"Y\"` adds only # the Y axis ticks, and `axis_ticks = FALSE` removes all axis ticks.  ## Text  # Like all the chart elements, the different text elements, such as the  # plot title, subtitle, caption, and more, can be controlled using the # `theme_iom` function. We encourage you, not to touch any of these parameters, # as they are part of IOM branding and should be used as is.  # However, you can still adjust the font size, font family, margin or  #justification of each of these elements using, for example, #the `plot_title_size`, `plot_title_margin`, etc. parameters.  #On top of the `theme_iom` parameters, the `{iomthemes}` package natively  # incorporates the `{ggtext}` package for advanced text rendering in the title, # subtitle and caption components. To showcase this, you can use the `{ggtext}`  # functionalities to include styled text directly in your plots.   ggplot(   data = df,   aes(x = date, y = val, fill = set) ) +   geom_col(     position = position_stack(reverse = TRUE),     width = 0.8   ) +   labs(     # Add some HTML style to the title     title = \"My title including              <span style='color:#0033A0;'>highlight color<\/span> | 2010-2020\",     # Automatic wrapping of long text     subtitle = \"My really long subtitle that will cover more than one line and                 that will be automatically wrapped thanks to ggtext so I don't                 have to manually put a line break\",     y = \"values\",     # Line break in the caption, use <br> instead of \\n     caption = \"Note: As it's HTML text the line break symbol is not                '\\\\n'<br>Source: Dummy data\"   ) +   scale_y_continuous(     expand = expansion(c(0, 0.01))   ) +   theme_iom(     grid = \"Y\",     axis = \"X\",     axis_title = \"Y\"   ) #> Warning: OS is not Windows. No fonts registered with windowsFonts(). #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database   ### Add text labels  #Text labels added with `geom_text` will also display using the recommended  # font and style.   ggplot(   data = df,   aes(x = date, y = val, fill = set) ) +   geom_col(     position = position_stack(reverse = TRUE),     width = 0.8   ) +   # Add geom_text   geom_text(aes(label = scales::number_format(accuracy = 0.1)(val)),     position = position_stack(vjust = 0.5, reverse = TRUE),     show.legend = FALSE   ) +   labs(     title = \"My title including              <span style='color:#0033A0;'>highlight color<\/span> | 2010-2020\",     subtitle = \"My really subtitle that will cover more than one line and that                 will be automatically wrapped thanks to ggtext so I don't have                  to manually put a line break\",     y = \"values\",     caption = \"Note: As it's HTML text the line break symbol is               not '\\\\n'<br>Source: Dummy data\"   ) +   scale_y_continuous(     expand = expansion(c(0, 0.01))   ) +   theme_iom(     grid = \"Y\",     axis = \"X\",     axis_title = \"Y\"   ) #> Warning: OS is not Windows. No fonts registered with windowsFonts(). #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database    ## Void  # To simplify the creation of pie/donut charts or maps, the `theme_iom` function # comes with a `void` parameter. When set to `TRUE`, this parameter removes  # all grid lines, ticks, and axes. For example, let's create a pie chart:  ggplot(   data = dplyr::filter(df, date == 2020),   aes(x = date, y = val, fill = set) ) +   geom_col(     position = position_stack(reverse = TRUE),     width = 0.8   ) +   labs(     title = \"My title | 2020\",     subtitle = \"My subtitle\",     y = \"values\",     caption = \"Source: Dummy data\"   ) +   scale_fill_iom_d() +   coord_polar(     theta = \"y\",     direction = -1   ) +   theme_iom(     void = TRUE # Remove all grid lines, ticks, and axes   ) #> Warning: OS is not Windows. No fonts registered with windowsFonts(). #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database #> Warning: font family 'Arial' not found in PostScript font database"},{"path":"https://iom.github.io/iomthemes/news/index.html","id":"iomthemes-011","dir":"Changelog","previous_headings":"","what":"iomthemes 0.1.1.","title":"iomthemes 0.1.1.","text":"Inspired previous work UNHCR! :) see unhcrthemes - even unhcrstyle initiated Cedric…","code":""}]
